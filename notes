{
  "username": "testuser",
  "email": "testuser@example.com",
  "password": "testpassword123"
}


{
  "username": "Testuser",
  "email": "testuser@example.com"
}

// register 2nd user
{
  "username": "testuser2",
  "email": "testuser2@example.com",
  "password": "testpassword12"
}

// login 
{
    "username": "testuser2",
    "password": "testpassword12"
}

// register
test2
test2@example.com
password2

// login
test2
password2

//  register 
test4
test4@example.com
1234567

// register 
asdf
asdf@example.com
1234

// register 
qwer
qwer@example.com
qwer






🔌 Backend Functionalities to Add (With Placement)
🔹 1. User Authentication
Where to add: /users/ app
Features:

Register (POST)

Login / Logout

JWT or Token-based auth (for React)

Password Reset

Profile Info (GET/UPDATE)

🔧 Tools: djangorestframework, djangorestframework-simplejwt

🔹 2. Product Management
Where to add: /products/ app
Features:

Add/Edit/Delete Product (Admin)

View Products (Frontend API)

Search, Filter, Sort Products

Categories & Variants (Size/Color)

Product Image Uploads

📦 Use ImageField with MEDIA_ROOT

🔹 3. Cart & Wishlist
Where to add: /store/ or new /cart/, /wishlist/ apps
Features:

Add/Remove products from cart

Update quantity

Save for later (wishlist)

Store in DB (not just in frontend memory)

🔹 4. Order Processing
Where to add: /orders/ app
Features:

Place Order

Save Address / Shipping

Order Status: Pending, Shipped, Delivered

Order History (for user)

🔧 Use models like:

python
Copy
Edit
Order, OrderItem, ShippingAddress
🔹 5. Payment Integration
Where to add: /payments/ app or inside orders/
Options:

Stripe (Card Payments)

Cash on Delivery

PayPal (optional)

Use Django views to receive payment confirmation.

🔹 6. Reviews & Ratings
Where to add: /reviews/ or inside products/
Features:

Add Rating & Review (1 to 5 stars)

Show Average Rating on Product

🔹 7. Admin Panel for Store Management
Manage users, products, orders from Django Admin

🔹 8. Newsletter / Contact Form
Where to add: /contact/ app
Features:

Save contact form submissions

Optional: Send email with SMTP

🔹 9. Connect React Frontend to Django Backend
Use Django as REST API provider using Django REST Framework (DRF)

Use Axios or Fetch in React to make API calls

Example API URL:

http
Copy
Edit
http://localhost:8000/api/products/
🔹 10. Deployment Tools
Host Backend: PythonAnywhere, Heroku, or VPS (e.g., DigitalOcean)

Host Frontend: Vercel, Netlify, or same server via NGINX

🧠 Final Tips
Use CORS headers: pip install django-cors-headers to allow frontend requests

Store secret keys and API credentials securely (using .env)

Use token authentication with React for login persistence







❌ Features NOT Included in This Cart Component:
Feature	Status	Explanation
🔧 Add / Edit / Delete Product (Admin Panel)	❌ Not Included	Yeh cart user-side component hai; admin-side product CRUD ki koi functionality yahan nahi hai.
📦 Product Management (Add/Edit)	❌ Not Included	Cart component mein product ko manage karna nahi hota — yeh backend ya admin dashboard ka part hota hai.
🔍 Search / Filter / Sort Products	❌ Not Included	Is component mein product search ya filtering ki koi functionality nahi hai — yeh /shop ya /products page ka feature hota hai.
🧾 Coupon Code Logic	❌ Not Implemented	Input aur Apply button to diya gaya hai, lekin coupon apply hone ke baad discount price calculation nahi hai.
🧩 Category or Variant Logic	⚠️ Partially	UI mein size and color show ho raha hai, lekin actual filtering ya variation handling logic nahi diya gaya.
🖼️ Product Image Uploads (Admin)	❌ Not in Cart	Yeh backend ya admin add/edit product functionality ka part hai, cart mein sirf image view ho raha hai.




import { useState, useMemo, useEffect } from "react"
import { useParams, useSearchParams } from "react-router-dom"
import { Filter, Grid, List, SlidersHorizontal } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Slider } from "@/components/ui/slider"
import { Checkbox } from "@/components/ui/checkbox"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from "@/components/ui/sheet"
import { ProductCard } from "@/components/product-card"
import { featuredProducts } from "@/data/products"
import axios from "axios"
import { BASE_URL } from "@/App"

const Shop = () => {
  const { category } = useParams()
  const [searchParams] = useSearchParams()
  const [viewMode, setViewMode] = useState<"grid" | "list">("grid")
  const [sortBy, setSortBy] = useState("newest")
  const [priceRange, setPriceRange] = useState([0, 500])
  const [selectedBrands, setSelectedBrands] = useState<string[]>([])
  const [searchQuery, setSearchQuery] = useState("")
  const [filtered, setFiltered] = useState([])

  useEffect(() => {
    setSearchQuery(searchParams.get("q") || "")
  }, [searchParams])


  const brands = ["Nike", "Adidas", "Apple", "Samsung", "Sony", "Microsoft"]
  const categories = ["Electronics", "Fashion", "Sports", "Home", "Beauty", "Accessories"]


  useEffect(() => {
    try {
      const response: any = axios.get(`${BASE_URL}/api/products/`);
      response.then((res: any) => {
        setFiltered(res.data || [])
        console.log("Products fetched successfully:", res)
      })

    } catch (e) {
      console.error("Error fetching products:", e)
    }

  }, [])




  const filteredProducts = useMemo(() => {
    // let filtered = [...featuredProducts]
    let filteredP = []

    // Filter by category
    if (category) {
      // filtered = filtered.filter(product =>
      //   product.category.toLowerCase() === category.toLowerCase()
      // )
    }

    // Filter by search query
    if (searchQuery) {
      // filtered = filtered.filter(product =>
      //   product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      //   product.category.toLowerCase().includes(searchQuery.toLowerCase())
      // )
    }

    // Filter by price range
    // filtered = filtered.filter(product =>
    //   product.price >= priceRange[0] && product.price <= priceRange[1]
    // )

    // Sort products
    // switch (sortBy) {
    //   case "price-low":
    //     filtered.sort((a, b) => a.price - b.price)
    //     break
    //   case "price-high":
    //     filtered.sort((a, b) => b.price - a.price)
    //     break
    //   case "rating":
    //     filtered.sort((a, b) => b.rating - a.rating)
    //     break
    //   case "newest":
    //   default:
    //     // Keep original order for newest
    //     break
    // }

    return filteredP
  }, [category, searchQuery, priceRange, sortBy])

  const FilterSidebar = () => (
    <div className="space-y-6">
      <div>
        <h3 className="font-semibold mb-3">Price Range</h3>
        <Slider
          value={priceRange}
          onValueChange={setPriceRange}
          max={500}
          min={0}
          step={10}
          className="mb-2"
        />
        <div className="flex justify-between text-sm text-muted-foreground">
          <span>${priceRange[0]}</span>
          <span>${priceRange[1]}</span>
        </div>
      </div>

      <div>
        <h3 className="font-semibold mb-3">Categories</h3>
        <div className="space-y-2">
          {categories.map((cat) => (
            <div key={cat} className="flex items-center space-x-2">
              <Checkbox id={cat} />
              <label htmlFor={cat} className="text-sm cursor-pointer">
                {cat}
              </label>
            </div>
          ))}
        </div>
      </div>

      <div>
        <h3 className="font-semibold mb-3">Brands</h3>
        <div className="space-y-2">
          {brands.map((brand) => (
            <div key={brand} className="flex items-center space-x-2">
              <Checkbox
                id={brand}
                checked={selectedBrands.includes(brand)}
                onCheckedChange={(checked) => {
                  if (checked) {
                    setSelectedBrands([...selectedBrands, brand])
                  } else {
                    setSelectedBrands(selectedBrands.filter(b => b !== brand))
                  }
                }}
              />
              <label htmlFor={brand} className="text-sm cursor-pointer">
                {brand}
              </label>
            </div>
          ))}
        </div>
      </div>

      <div>
        <h3 className="font-semibold mb-3">Rating</h3>
        <div className="space-y-2">
          {[4, 3, 2, 1].map((rating) => (
            <div key={rating} className="flex items-center space-x-2">
              <Checkbox id={`rating-${rating}`} />
              <label htmlFor={`rating-${rating}`} className="text-sm cursor-pointer">
                {rating}+ Stars
              </label>
            </div>
          ))}
        </div>
      </div>
    </div>
  )

  return (
    <div className="container mx-auto px-4 py-8">
      {/* Header */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-4">
          {category ? `${category.charAt(0).toUpperCase() + category.slice(1)} Products` : "All Products"}
        </h1>
        <div className="flex flex-col md:flex-row gap-4">
          <div className="flex-1">
            <Input
              placeholder="Search products..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="max-w-md"
            />
          </div>
        </div>
      </div>

      <div className="flex gap-8">
        {/* Desktop Filters */}
        <div className="hidden lg:block w-64 flex-shrink-0">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-lg font-semibold">Filters</h2>
                <Filter className="h-5 w-5" />
              </div>
              <FilterSidebar />
            </CardContent>
          </Card>
        </div>

        {/* Main Content */}
        <div className="flex-1">
          {/* Controls */}
          <div className="flex justify-between items-center mb-6">
            <div className="flex items-center gap-4">
              <Badge variant="secondary">
                {filtered.length} products
              </Badge>

              {/* Mobile Filter */}
              <Sheet>
                <SheetTrigger asChild>
                  <Button variant="outline" size="sm" className="lg:hidden">
                    <SlidersHorizontal className="h-4 w-4 mr-2" />
                    Filters
                  </Button>
                </SheetTrigger>
                <SheetContent side="left" className="w-80">
                  <SheetHeader>
                    <SheetTitle>Filters</SheetTitle>
                  </SheetHeader>
                  <div className="mt-6">
                    <FilterSidebar />
                  </div>
                </SheetContent>
              </Sheet>
            </div>

            <div className="flex items-center gap-4">
              <Select value={sortBy} onValueChange={setSortBy}>
                <SelectTrigger className="w-40">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="newest">Newest</SelectItem>
                  <SelectItem value="price-low">Price: Low to High</SelectItem>
                  <SelectItem value="price-high">Price: High to Low</SelectItem>
                  <SelectItem value="rating">Best Rating</SelectItem>
                </SelectContent>
              </Select>

              <div className="flex border rounded-lg">
                <Button
                  variant={viewMode === "grid" ? "default" : "ghost"}
                  size="sm"
                  onClick={() => setViewMode("grid")}
                  className="rounded-r-none"
                >
                  <Grid className="h-4 w-4" />
                </Button>
                <Button
                  variant={viewMode === "list" ? "default" : "ghost"}
                  size="sm"
                  onClick={() => setViewMode("list")}
                  className="rounded-l-none"
                >
                  <List className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </div>

          {/* Products Grid */}
          <div className={`grid gap-6 ${viewMode === "grid"
            ? "grid-cols-1 md:grid-cols-2 xl:grid-cols-3"
            : "grid-cols-1"
            }`}>
            {filtered.map((product) => (
              <ProductCard key={product.id} product={product} />
            ))}
          </div>

          {filtered.length === 0 && (
            <div className="text-center py-12">
              <p className="text-muted-foreground text-lg">No products found matching your criteria.</p>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

export default Shop
